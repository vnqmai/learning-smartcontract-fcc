// const ethers = require("ethers");
// const fs = require("fs");
// require("dotenv").config();
import "dotenv/config";
import { ethers } from "ethers";
import * as fs from "fs-extra";

// synchronous [solidity]
// asynchronous [javascript]

async function main() {
  // compile them in our code
  // compile them separately
  // HTTP://127.0.0.1:7545
  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL!);
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY!, provider);
  // const encryptedJson = fs.readFileSync("./.encryptedKey.json", "utf8");
  // let wallet = new ethers.Wallet.fromEncryptedJsonSync(
  //   encryptedJson,
  //   process.env.PRIVATE_KEY_PASSWORD!
  // );
  // wallet = await wallet.connect(provider);
  const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
  const binary = fs.readFileSync(
    "./SimpleStorage_sol_SimpleStorage.bin",
    "utf8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying, please wait...");
  const contract = await contractFactory
    .deploy
    // {gasPrice, gasLimit,...}
    (); // STOP here! Wait for contract to deploy.
  await contract.deployTransaction.wait(1);
  // const transactionReceipt = await contract.deployTransaction.wait(1);
  // console.log("Here is the deployment transaction (transaction response): ");
  // console.log(contract.deployTransaction);
  // console.log("Here is the transaction receipt: ");
  // console.log(transactionReceipt);

  // console.log("Let's deploy with only transaction data!");
  // const nonce = await wallet.getTransactionCount();
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 1000000,
  //   to: null,
  //   value: 0,
  //   data: "0x608060405260008060006101000a81548160ff021916908315150217905550607b6001556040518060400160405280600481526020017f46697665000000000000000000000000000000000000000000000000000000008152506002908051906020019061006e9291906100ff565b5060056003557311f19ff3f7aa2417b4d1554bc3d397c0d3ae4e07600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f63617400000000000000000000000000000000000000000000000000000000006005553480156100f957600080fd5b50610203565b82805461010b906101a2565b90600052602060002090601f01602090048101928261012d5760008555610174565b82601f1061014657805160ff1916838001178555610174565b82800160010185558215610174579182015b82811115610173578251825591602001919060010190610158565b5b5090506101819190610185565b5090565b5b8082111561019e576000816000905550600101610186565b5090565b600060028204905060018216806101ba57607f821691505b602082108114156101ce576101cd6101d4565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6107e9806102126000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80636057361d1161005b5780636057361d146100dc5780636f760f41146100f85780638bab8dd5146101145780639e7a13ad146101445761007d565b80632e64cec114610082578063471f7cdf146100a05780634f2be91f146100be575b600080fd5b61008a610175565b60405161009791906105a2565b60405180910390f35b6100a861017f565b6040516100b591906105a2565b60405180910390f35b6100c6610185565b6040516100d391906105a2565b60405180910390f35b6100f660048036038101906100f191906104e5565b61018e565b005b610112600480360381019061010d9190610489565b610198565b005b61012e60048036038101906101299190610440565b61022e565b60405161013b91906105a2565b60405180910390f35b61015e600480360381019061015991906104e5565b61025c565b60405161016c9291906105bd565b60405180910390f35b6000600154905090565b60015481565b60006002905090565b8060018190555050565b600060405180604001604052808381526020018481525090506006819080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001019080519060200190610203929190610318565b50505081600784604051610217919061058b565b908152602001604051809103902081905550505050565b6007818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b6006818154811061026c57600080fd5b9060005260206000209060020201600091509050806000015490806001018054610295906106b6565b80601f01602080910402602001604051908101604052809291908181526020018280546102c1906106b6565b801561030e5780601f106102e35761010080835404028352916020019161030e565b820191906000526020600020905b8154815290600101906020018083116102f157829003601f168201915b5050505050905082565b828054610324906106b6565b90600052602060002090601f016020900481019282610346576000855561038d565b82601f1061035f57805160ff191683800117855561038d565b8280016001018555821561038d579182015b8281111561038c578251825591602001919060010190610371565b5b50905061039a919061039e565b5090565b5b808211156103b757600081600090555060010161039f565b5090565b60006103ce6103c984610612565b6105ed565b9050828152602081018484840111156103ea576103e961077c565b5b6103f5848285610674565b509392505050565b600082601f83011261041257610411610777565b5b81356104228482602086016103bb565b91505092915050565b60008135905061043a8161079c565b92915050565b60006020828403121561045657610455610786565b5b600082013567ffffffffffffffff81111561047457610473610781565b5b610480848285016103fd565b91505092915050565b600080604083850312156104a05761049f610786565b5b600083013567ffffffffffffffff8111156104be576104bd610781565b5b6104ca858286016103fd565b92505060206104db8582860161042b565b9150509250929050565b6000602082840312156104fb576104fa610786565b5b60006105098482850161042b565b91505092915050565b600061051d82610643565b610527818561064e565b9350610537818560208601610683565b6105408161078b565b840191505092915050565b600061055682610643565b610560818561065f565b9350610570818560208601610683565b80840191505092915050565b6105858161066a565b82525050565b6000610597828461054b565b915081905092915050565b60006020820190506105b7600083018461057c565b92915050565b60006040820190506105d2600083018561057c565b81810360208301526105e48184610512565b90509392505050565b60006105f7610608565b905061060382826106e8565b919050565b6000604051905090565b600067ffffffffffffffff82111561062d5761062c610748565b5b6106368261078b565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156106a1578082015181840152602081019050610686565b838111156106b0576000848401525b50505050565b600060028204905060018216806106ce57607f821691505b602082108114156106e2576106e1610719565b5b50919050565b6106f18261078b565b810181811067ffffffffffffffff821117156107105761070f610748565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6107a58161066a565b81146107b057600080fd5b5056fea2646970667358221220023b8ef1328d84ea140385d85c6cc4354652402b4d29a49f3098c658e092bd5364736f6c63430008070033",
  //   chainId: 1337,
  // };
  // // const signedTxResponse = await wallet.signTransaction(tx);
  // // console.log(signedTxResponse);
  // const sentTxResponse = await wallet.sendTransaction(tx);
  // await sentTxResponse.wait(1);
  // console.log(sentTxResponse);
  console.log(`Contract Address: ${contract.address}`);
  // Get number
  const currentFavoriteNumber = await contract.retrieve();
  console.log(`Current Favorite Number: ${currentFavoriteNumber.toString()}`);
  const transactionResponse = await contract.store("7");
  const transactionReceipt = await transactionResponse.wait(1);
  const updatedFavoriteNumber = await contract.retrieve();
  console.log(`Updated favorite number is: ${updatedFavoriteNumber}`);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
