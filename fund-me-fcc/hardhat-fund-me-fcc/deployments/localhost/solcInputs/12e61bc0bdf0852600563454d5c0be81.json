{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "// Get funds from users\n// Withdraw funds\n// Set a minimum funding value in USD\n\n// Pragma\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\n// Import\n// import \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\n// Error codes\nerror FundMe__NotOwner(); // solidity ^0.8.7\n\n// Interfaces, libraries, contracts\n\n/** @title A contract for crowd funding\n *   @author Mai VNQ\n *   @notice  This contract is to demo a sample funding contract\n *   @dev This implements price feeds as our library\n */\ncontract FundMe {\n  // Type declarations\n  using PriceConverter for uint256;\n  // uint256 public number;\n\n  // State variables\n  uint256 public constant minimumUsd = 50 * 1e18;\n  mapping(address => uint256) private s_addressToAmountFunded;\n  address[] private s_funders;\n  address private immutable i_owner;\n  AggregatorV3Interface private s_priceFeed;\n\n  // Modifiers\n  modifier onlyOwner() {\n    // require(msg.sender == i_owner, \"Sender is not owner!\");\n    if (msg.sender != i_owner) {\n      revert FundMe__NotOwner();\n    }\n    _;\n  }\n\n  // Functions Order:\n  // constructor\n  // receive\n  // fallback\n  // external\n  // public\n  // internal\n  // private\n  // view / pure\n\n  constructor(address s_priceFeedAddress) {\n    i_owner = msg.sender;\n    s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\n  }\n\n  // // What happens if someone sends this contract ETH without calling the fund function?\n  // receive() external payable {\n  //   fund();\n  // }\n\n  // fallback() external payable {\n  //   fund();\n  // }\n\n  // test:\n  // (minimumUsd)\n  // get eth price from data.chain.link (ethprice)\n  // minimumUsd / ethprice = (value in eth)\n  // go to eth-converter.com to convert eth to wei then input to value field then press \"fund\"\n  /**\n   * @notice This function funds this contract\n   * @dev This implements price feeds as our library\n   */\n  function fund() public payable {\n    // want to be able to set a minimu fund amount in USD\n    // 1. How do we send ETH to this contract?\n    // number = 5;\n    require(\n      msg.value.getConversionRate(s_priceFeed) >= minimumUsd,\n      \"Didn't send enough\"\n    ); //1e18wei = 1eth\n    // require(getConversionRate(msg.value) >= minimumUsd, \"Didn't send enough\"); //1e18wei = 1eth\n    // a ton of computation here\n    s_funders.push(msg.sender);\n    s_addressToAmountFunded[msg.sender] = msg.value;\n\n    // what is reverting?\n    // undo any action before, and send remaining gas back\n  }\n\n  function getPrice() public view returns (uint256) {\n    // // ABI\n    // // Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e (find on docs.chain.link)\n    // AggregatorV3Interface s_priceFeed = AggregatorV3Interface(\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n    // );\n    (, int256 price, , , ) = s_priceFeed.latestRoundData();\n    // ETH in terms of USD\n    // 3000_0000000\n    return uint256(price * 1e10); // 1**10 = 10000000000\n  }\n\n  function getVersion() public view returns (uint256) {\n    // AggregatorV3Interface s_priceFeed = AggregatorV3Interface(\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n    // );\n    return s_priceFeed.version();\n  }\n\n  function getConversionRate(uint256 ethAmount) public view returns (uint256) {\n    uint256 ethPrice = getPrice();\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // Always multiple before you divide\n    return ethAmountInUsd;\n\n    // ex:\n    // ethPrice = 3000_000000000000000000 = ETH / USD price\n    // ethAmount = 1_000000000000000000\n    // ethAmountInUsd = 2999.9999999999999999999999\n  }\n\n  function widthdraw() public onlyOwner {\n    // require(msg.sender == owner, \"Sender is not owner!\");\n    // for loop\n    // [1, 2, 3, 4]\n    // for (/* string index, ending index, step amount*/)\n    for (\n      uint256 funderIndex = 0;\n      funderIndex < s_funders.length;\n      funderIndex++\n    ) {\n      address funder = s_funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    // reset the array\n    s_funders = new address[](0);\n    // actually widthdraw the\n\n    // // https://solidity-by-example.org/sending-ether/\n    // // transfer\n    // // msg.sender = address\n    // // payable(msg.sender) = payable address\n    // payable(msg.sender).transfer(address(this).balance);\n\n    // // send\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\n    // require(sendSuccess, \"Send failed\");\n\n    // call - most recommended way to send token\n    // *For the most part*\n    // It can be case-by-case\n    // (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\"\");\n    (bool callSuccess, ) = payable(msg.sender).call{\n      value: address(this).balance\n    }(\"\");\n    require(callSuccess, \"Call failed\");\n  }\n\n  function cheaperWithdraw() public payable onlyOwner {\n    address[] memory funders = s_funders;\n    // mappings can't be in memory, sorry!\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\n      address funder = funders[funderIndex];\n      s_addressToAmountFunded[funder] = 0;\n    }\n    s_funders = new address[](0);\n    (bool success, ) = payable(i_owner).call{value: address(this).balance}(\"\");\n    require(success);\n  }\n\n  // View, pure\n\n  function getOwner() public view returns (address) {\n    return i_owner;\n  }\n\n  function getFunder(uint256 index) public view returns (address) {\n    return s_funders[index];\n  }\n\n  function getAddressToAmountFunded(address funder)\n    public\n    view\n    returns (uint256)\n  {\n    return s_addressToAmountFunded[funder];\n  }\n\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\n    return s_priceFeed;\n  }\n}\n\n// 1. Enums\n// 2. Events\n// 3. Try / Catch\n// 4. Function Selectors\n// 5. abi.encode / decode\n// 6. Hashing\n// 7. Yul / Assumbly\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter {\n  function getPrice(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    // // ABI\n    // // Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e (find on docs.chain.link)\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n    // );\n    (, int256 price, , , ) = priceFeed.latestRoundData();\n    // ETH in terms of USD\n    // 3000_0000000\n    return uint256(price * 1e10); // 1**10 = 10000000000\n  }\n\n  function getVersion(AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n    // );\n    return priceFeed.version();\n  }\n\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\n    internal\n    view\n    returns (uint256)\n  {\n    uint256 ethPrice = getPrice(priceFeed);\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // Always multiple before you divide\n    return ethAmountInUsd;\n\n    // ex:\n    // ethPrice = 3000_000000000000000000 = ETH / USD price\n    // ethAmount = 1_000000000000000000\n    // ethAmountInUsd = 2999.9999999999999999999999\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}