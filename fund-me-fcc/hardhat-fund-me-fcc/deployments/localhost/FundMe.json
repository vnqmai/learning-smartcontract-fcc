{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "s_priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getConversionRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumUsd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "widthdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3b6c411e692380dc76041fb71a45c37d0c295348b8f3665ea695e41e39f1e003",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1147610",
    "logsBloom": "0x
    "blockHash": "0x606d8b6ab716e9059acaf93f08f8752343b632fabd92bd1d6eb0a36ca198280d",
    "transactionHash": "0x3b6c411e692380dc76041fb71a45c37d0c295348b8f3665ea695e41e39f1e003",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1147610",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "12e61bc0bdf0852600563454d5c0be81",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"s_priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"getConversionRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"widthdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Mai VNQ\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds\\n// Set a minimum funding value in USD\\n\\n// Pragma\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// Import\\n// import \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// Error codes\\nerror FundMe__NotOwner(); // solidity ^0.8.7\\n\\n// Interfaces, libraries, contracts\\n\\n/** @title A contract for crowd funding\\n *   @author Mai VNQ\\n *   @notice  This contract is to demo a sample funding contract\\n *   @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n  // Type declarations\\n  using PriceConverter for uint256;\\n  // uint256 public number;\\n\\n  // State variables\\n  uint256 public constant minimumUsd = 50 * 1e18;\\n  mapping(address => uint256) private s_addressToAmountFunded;\\n  address[] private s_funders;\\n  address private immutable i_owner;\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  // Modifiers\\n  modifier onlyOwner() {\\n    // require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n    if (msg.sender != i_owner) {\\n      revert FundMe__NotOwner();\\n    }\\n    _;\\n  }\\n\\n  // Functions Order:\\n  // constructor\\n  // receive\\n  // fallback\\n  // external\\n  // public\\n  // internal\\n  // private\\n  // view / pure\\n\\n  constructor(address s_priceFeedAddress) {\\n    i_owner = msg.sender;\\n    s_priceFeed = AggregatorV3Interface(s_priceFeedAddress);\\n  }\\n\\n  // // What happens if someone sends this contract ETH without calling the fund function?\\n  // receive() external payable {\\n  //   fund();\\n  // }\\n\\n  // fallback() external payable {\\n  //   fund();\\n  // }\\n\\n  // test:\\n  // (minimumUsd)\\n  // get eth price from data.chain.link (ethprice)\\n  // minimumUsd / ethprice = (value in eth)\\n  // go to eth-converter.com to convert eth to wei then input to value field then press \\\"fund\\\"\\n  /**\\n   * @notice This function funds this contract\\n   * @dev This implements price feeds as our library\\n   */\\n  function fund() public payable {\\n    // want to be able to set a minimu fund amount in USD\\n    // 1. How do we send ETH to this contract?\\n    // number = 5;\\n    require(\\n      msg.value.getConversionRate(s_priceFeed) >= minimumUsd,\\n      \\\"Didn't send enough\\\"\\n    ); //1e18wei = 1eth\\n    // require(getConversionRate(msg.value) >= minimumUsd, \\\"Didn't send enough\\\"); //1e18wei = 1eth\\n    // a ton of computation here\\n    s_funders.push(msg.sender);\\n    s_addressToAmountFunded[msg.sender] = msg.value;\\n\\n    // what is reverting?\\n    // undo any action before, and send remaining gas back\\n  }\\n\\n  function getPrice() public view returns (uint256) {\\n    // // ABI\\n    // // Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e (find on docs.chain.link)\\n    // AggregatorV3Interface s_priceFeed = AggregatorV3Interface(\\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    // );\\n    (, int256 price, , , ) = s_priceFeed.latestRoundData();\\n    // ETH in terms of USD\\n    // 3000_0000000\\n    return uint256(price * 1e10); // 1**10 = 10000000000\\n  }\\n\\n  function getVersion() public view returns (uint256) {\\n    // AggregatorV3Interface s_priceFeed = AggregatorV3Interface(\\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    // );\\n    return s_priceFeed.version();\\n  }\\n\\n  function getConversionRate(uint256 ethAmount) public view returns (uint256) {\\n    uint256 ethPrice = getPrice();\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // Always multiple before you divide\\n    return ethAmountInUsd;\\n\\n    // ex:\\n    // ethPrice = 3000_000000000000000000 = ETH / USD price\\n    // ethAmount = 1_000000000000000000\\n    // ethAmountInUsd = 2999.9999999999999999999999\\n  }\\n\\n  function widthdraw() public onlyOwner {\\n    // require(msg.sender == owner, \\\"Sender is not owner!\\\");\\n    // for loop\\n    // [1, 2, 3, 4]\\n    // for (/* string index, ending index, step amount*/)\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    // reset the array\\n    s_funders = new address[](0);\\n    // actually widthdraw the\\n\\n    // // https://solidity-by-example.org/sending-ether/\\n    // // transfer\\n    // // msg.sender = address\\n    // // payable(msg.sender) = payable address\\n    // payable(msg.sender).transfer(address(this).balance);\\n\\n    // // send\\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n    // require(sendSuccess, \\\"Send failed\\\");\\n\\n    // call - most recommended way to send token\\n    // *For the most part*\\n    // It can be case-by-case\\n    // (bool callSuccess, bytes memory dataReturned) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function cheaperWithdraw() public payable onlyOwner {\\n    address[] memory funders = s_funders;\\n    // mappings can't be in memory, sorry!\\n    for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n      address funder = funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool success, ) = payable(i_owner).call{value: address(this).balance}(\\\"\\\");\\n    require(success);\\n  }\\n\\n  // View, pure\\n\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getAddressToAmountFunded(address funder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmountFunded[funder];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n}\\n\\n// 1. Enums\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selectors\\n// 5. abi.encode / decode\\n// 6. Hashing\\n// 7. Yul / Assumbly\\n\",\"keccak256\":\"0x40ccfcb56dc085d9e4fffa159b2fb04a3e04e0b8312803ef2456e898c6a80beb\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // // ABI\\n    // // Address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e (find on docs.chain.link)\\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    // );\\n    (, int256 price, , , ) = priceFeed.latestRoundData();\\n    // ETH in terms of USD\\n    // 3000_0000000\\n    return uint256(price * 1e10); // 1**10 = 10000000000\\n  }\\n\\n  function getVersion(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //   0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    // );\\n    return priceFeed.version();\\n  }\\n\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // Always multiple before you divide\\n    return ethAmountInUsd;\\n\\n    // ex:\\n    // ethPrice = 3000_000000000000000000 = ETH / USD price\\n    // ethAmount = 1_000000000000000000\\n    // ethAmountInUsd = 2999.9999999999999999999999\\n  }\\n}\\n\",\"keccak256\":\"0xb3909d0c17cf5a2ee749fbdd9b7a9e8cca3fa873c9a6320d8e5233ee46f7bd7e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620014eb380380620014eb833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6113656200018660003960008181610358015281816105d40152818161080c0152610a0201526113656000f3fe60806040526004361061009c5760003560e01c8063893d20e811610064578063893d20e81461018857806398d5fdca146101b35780639e87a5cd146101de578063b60d428814610209578063be2693f014610213578063d7b4750c1461021d5761009c565b80630343fb25146100a1578063098de820146100de5780630d8e6e2c1461010957806352b50a2a146101345780636e5b6b281461014b575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610cc6565b61025a565b6040516100d59190610d0c565b60405180910390f35b3480156100ea57600080fd5b506100f36102a2565b6040516101009190610d0c565b60405180910390f35b34801561011557600080fd5b5061011e6102af565b60405161012b9190610d0c565b60405180910390f35b34801561014057600080fd5b50610149610356565b005b34801561015757600080fd5b50610172600480360381019061016d9190610d53565b610596565b60405161017f9190610d0c565b60405180910390f35b34801561019457600080fd5b5061019d6105d0565b6040516101aa9190610d8f565b60405180910390f35b3480156101bf57600080fd5b506101c86105f8565b6040516101d59190610d0c565b60405180910390f35b3480156101ea57600080fd5b506101f36106b8565b6040516102009190610e09565b60405180910390f35b6102116106e2565b005b61021b61080a565b005b34801561022957600080fd5b50610244600480360381019061023f9190610d53565b610a98565b6040516102519190610d8f565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561031957600080fd5b505afa15801561032d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610e39565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103db576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104865760006001828154811061040157610400610e66565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047e90610ec4565b9150506103de565b50600067ffffffffffffffff8111156104a2576104a1610f0d565b5b6040519080825280602002602001820160405280156104d05781602001602082028036833780820191505090505b50600190805190602001906104e6929190610bbc565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050d90610f6d565b60006040518083038185875af1925050503d806000811461054a576040519150601f19603f3d011682016040523d82523d6000602084013e61054f565b606091505b5050905080610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90610fdf565b60405180910390fd5b50565b6000806105a16105f8565b90506000670de0b6b3a764000084836105ba9190610fff565b6105c49190611088565b90508092505050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561066357600080fd5b505afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190611131565b5050509150506402540be400816106b291906111ac565b91505090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610721600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610ae090919063ffffffff16565b1015610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107599061130f565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561091357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c9575b5050505050905060005b815181101561099d57600082828151811061093b5761093a610e66565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061099590610ec4565b91505061091d565b50600067ffffffffffffffff8111156109b9576109b8610f0d565b5b6040519080825280602002602001820160405280156109e75781602001602082028036833780820191505090505b50600190805190602001906109fd929190610bbc565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610a4490610f6d565b60006040518083038185875af1925050503d8060008114610a81576040519150601f19603f3d011682016040523d82523d6000602084013e610a86565b606091505b5050905080610a9457600080fd5b5050565b600060018281548110610aae57610aad610e66565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610aec83610b1c565b90506000670de0b6b3a76400008583610b059190610fff565b610b0f9190611088565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b6557600080fd5b505afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d9190611131565b5050509150506402540be40081610bb491906111ac565b915050919050565b828054828255906000526020600020908101928215610c35579160200282015b82811115610c345782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bdc565b5b509050610c429190610c46565b5090565b5b80821115610c5f576000816000905550600101610c47565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c9382610c68565b9050919050565b610ca381610c88565b8114610cae57600080fd5b50565b600081359050610cc081610c9a565b92915050565b600060208284031215610cdc57610cdb610c63565b5b6000610cea84828501610cb1565b91505092915050565b6000819050919050565b610d0681610cf3565b82525050565b6000602082019050610d216000830184610cfd565b92915050565b610d3081610cf3565b8114610d3b57600080fd5b50565b600081359050610d4d81610d27565b92915050565b600060208284031215610d6957610d68610c63565b5b6000610d7784828501610d3e565b91505092915050565b610d8981610c88565b82525050565b6000602082019050610da46000830184610d80565b92915050565b6000819050919050565b6000610dcf610dca610dc584610c68565b610daa565b610c68565b9050919050565b6000610de182610db4565b9050919050565b6000610df382610dd6565b9050919050565b610e0381610de8565b82525050565b6000602082019050610e1e6000830184610dfa565b92915050565b600081519050610e3381610d27565b92915050565b600060208284031215610e4f57610e4e610c63565b5b6000610e5d84828501610e24565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ecf82610cf3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f0257610f01610e95565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f57600083610f3c565b9150610f6282610f47565b600082019050919050565b6000610f7882610f4a565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610fc9600b83610f82565b9150610fd482610f93565b602082019050919050565b60006020820190508181036000830152610ff881610fbc565b9050919050565b600061100a82610cf3565b915061101583610cf3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561104e5761104d610e95565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061109382610cf3565b915061109e83610cf3565b9250826110ae576110ad611059565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110d8816110b9565b81146110e357600080fd5b50565b6000815190506110f5816110cf565b92915050565b6000819050919050565b61110e816110fb565b811461111957600080fd5b50565b60008151905061112b81611105565b92915050565b600080600080600060a0868803121561114d5761114c610c63565b5b600061115b888289016110e6565b955050602061116c8882890161111c565b945050604061117d88828901610e24565b935050606061118e88828901610e24565b925050608061119f888289016110e6565b9150509295509295909350565b60006111b7826110fb565b91506111c2836110fb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561120157611200610e95565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561123e5761123d610e95565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561127b5761127a610e95565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112b8576112b7610e95565b5b828202905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b60006112f9601283610f82565b9150611304826112c3565b602082019050919050565b60006020820190508181036000830152611328816112ec565b905091905056fea2646970667358221220ce296e8c4d637d4be5194dfbee494f0fbdde38ee699eee0a855daa890af1137e64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061009c5760003560e01c8063893d20e811610064578063893d20e81461018857806398d5fdca146101b35780639e87a5cd146101de578063b60d428814610209578063be2693f014610213578063d7b4750c1461021d5761009c565b80630343fb25146100a1578063098de820146100de5780630d8e6e2c1461010957806352b50a2a146101345780636e5b6b281461014b575b600080fd5b3480156100ad57600080fd5b506100c860048036038101906100c39190610cc6565b61025a565b6040516100d59190610d0c565b60405180910390f35b3480156100ea57600080fd5b506100f36102a2565b6040516101009190610d0c565b60405180910390f35b34801561011557600080fd5b5061011e6102af565b60405161012b9190610d0c565b60405180910390f35b34801561014057600080fd5b50610149610356565b005b34801561015757600080fd5b50610172600480360381019061016d9190610d53565b610596565b60405161017f9190610d0c565b60405180910390f35b34801561019457600080fd5b5061019d6105d0565b6040516101aa9190610d8f565b60405180910390f35b3480156101bf57600080fd5b506101c86105f8565b6040516101d59190610d0c565b60405180910390f35b3480156101ea57600080fd5b506101f36106b8565b6040516102009190610e09565b60405180910390f35b6102116106e2565b005b61021b61080a565b005b34801561022957600080fd5b50610244600480360381019061023f9190610d53565b610a98565b6040516102519190610d8f565b60405180910390f35b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6802b5e3af16b188000081565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b15801561031957600080fd5b505afa15801561032d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103519190610e39565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103db576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104865760006001828154811061040157610400610e66565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047e90610ec4565b9150506103de565b50600067ffffffffffffffff8111156104a2576104a1610f0d565b5b6040519080825280602002602001820160405280156104d05781602001602082028036833780820191505090505b50600190805190602001906104e6929190610bbc565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050d90610f6d565b60006040518083038185875af1925050503d806000811461054a576040519150601f19603f3d011682016040523d82523d6000602084013e61054f565b606091505b5050905080610593576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90610fdf565b60405180910390fd5b50565b6000806105a16105f8565b90506000670de0b6b3a764000084836105ba9190610fff565b6105c49190611088565b90508092505050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561066357600080fd5b505afa158015610677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069b9190611131565b5050509150506402540be400816106b291906111ac565b91505090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610721600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1634610ae090919063ffffffff16565b1015610762576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107599061130f565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461088f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600180548060200260200160405190810160405280929190818152602001828054801561091357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116108c9575b5050505050905060005b815181101561099d57600082828151811061093b5761093a610e66565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061099590610ec4565b91505061091d565b50600067ffffffffffffffff8111156109b9576109b8610f0d565b5b6040519080825280602002602001820160405280156109e75781602001602082028036833780820191505090505b50600190805190602001906109fd929190610bbc565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1647604051610a4490610f6d565b60006040518083038185875af1925050503d8060008114610a81576040519150601f19603f3d011682016040523d82523d6000602084013e610a86565b606091505b5050905080610a9457600080fd5b5050565b600060018281548110610aae57610aad610e66565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600080610aec83610b1c565b90506000670de0b6b3a76400008583610b059190610fff565b610b0f9190611088565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610b6557600080fd5b505afa158015610b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9d9190611131565b5050509150506402540be40081610bb491906111ac565b915050919050565b828054828255906000526020600020908101928215610c35579160200282015b82811115610c345782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bdc565b5b509050610c429190610c46565b5090565b5b80821115610c5f576000816000905550600101610c47565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610c9382610c68565b9050919050565b610ca381610c88565b8114610cae57600080fd5b50565b600081359050610cc081610c9a565b92915050565b600060208284031215610cdc57610cdb610c63565b5b6000610cea84828501610cb1565b91505092915050565b6000819050919050565b610d0681610cf3565b82525050565b6000602082019050610d216000830184610cfd565b92915050565b610d3081610cf3565b8114610d3b57600080fd5b50565b600081359050610d4d81610d27565b92915050565b600060208284031215610d6957610d68610c63565b5b6000610d7784828501610d3e565b91505092915050565b610d8981610c88565b82525050565b6000602082019050610da46000830184610d80565b92915050565b6000819050919050565b6000610dcf610dca610dc584610c68565b610daa565b610c68565b9050919050565b6000610de182610db4565b9050919050565b6000610df382610dd6565b9050919050565b610e0381610de8565b82525050565b6000602082019050610e1e6000830184610dfa565b92915050565b600081519050610e3381610d27565b92915050565b600060208284031215610e4f57610e4e610c63565b5b6000610e5d84828501610e24565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ecf82610cf3565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610f0257610f01610e95565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f57600083610f3c565b9150610f6282610f47565b600082019050919050565b6000610f7882610f4a565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610fc9600b83610f82565b9150610fd482610f93565b602082019050919050565b60006020820190508181036000830152610ff881610fbc565b9050919050565b600061100a82610cf3565b915061101583610cf3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561104e5761104d610e95565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061109382610cf3565b915061109e83610cf3565b9250826110ae576110ad611059565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110d8816110b9565b81146110e357600080fd5b50565b6000815190506110f5816110cf565b92915050565b6000819050919050565b61110e816110fb565b811461111957600080fd5b50565b60008151905061112b81611105565b92915050565b600080600080600060a0868803121561114d5761114c610c63565b5b600061115b888289016110e6565b955050602061116c8882890161111c565b945050604061117d88828901610e24565b935050606061118e88828901610e24565b925050608061119f888289016110e6565b9150509295509295909350565b60006111b7826110fb565b91506111c2836110fb565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561120157611200610e95565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561123e5761123d610e95565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561127b5761127a610e95565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112b8576112b7610e95565b5b828202905092915050565b7f4469646e27742073656e6420656e6f7567680000000000000000000000000000600082015250565b60006112f9601283610f82565b9150611304826112c3565b602082019050919050565b60006020820190508181036000830152611328816112ec565b905091905056fea2646970667358221220ce296e8c4d637d4be5194dfbee494f0fbdde38ee699eee0a855daa890af1137e64736f6c63430008080033",
  "devdoc": {
    "author": "Mai VNQ",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}